// start of components/Dashboard.tsx
// start of frontend/src/components/Dashboard.tsx
import React, { useState, useEffect } from 'react';
import { Button } from './ui/button';
import { Badge } from './ui/badge';
import { Card, CardContent, CardHeader, CardTitle } from './ui/card';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from './ui/table';
import { FileCheck, AlertCircle, MessageSquare, TrendingUp, Clock, CheckCircle2, Eye, RefreshCw } from 'lucide-react';
import { useAuth } from '../context/AuthContext';
import apiService from '../api/apiService';
import { toast } from 'sonner';

interface DashboardProps {
  onNavigate: (page: string, id?: string) => void;
  onViewApplication: (id: string) => void;
}

// --- Type Definitions for API Data ---
interface DashboardStats {
  my_applications?: {
    total: number;
    pending: number; // Includes PENDING_REVIEW and PENDING_CORRECTION
    approved: number;
    rejected: number;
  };
  my_tickets?: {
    open: number;
    awaiting_reply: number;
  };
}

interface ApiApplication {
  tracking_code: string;
  application_type: string;
  created_at: string;
  status: 'PENDING_REVIEW' | 'PENDING_CORRECTION' | 'APPROVED' | 'REJECTED';
}

// --- Helper Functions ---
const statusMap: { [key: string]: string } = {
  APPROVED: 'approved',
  REJECTED: 'rejected',
  PENDING_REVIEW: 'under-review',
  PENDING_CORRECTION: 'requires-action',
};

const getStatusBadge = (statusKey: string) => {
  switch (statusKey) {
    case 'approved': return <Badge className="bg-emerald-600 text-white hover:bg-emerald-700">Approved</Badge>;
    case 'under-review': return <Badge className="bg-amber-500 text-white hover:bg-amber-600">Under Review</Badge>;
    case 'requires-action': return <Badge className="bg-red-600 text-white hover:bg-red-700">Requires Action</Badge>;
    default: return <Badge variant="secondary">{statusKey}</Badge>;
  }
};

const formatDate = (dateString: string) => new Date(dateString).toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: 'numeric' });

export function Dashboard({ onNavigate, onViewApplication }: DashboardProps) {
  const { user } = useAuth();
  const [stats, setStats] = useState<DashboardStats | null>(null);
  const [recentApplications, setRecentApplications] = useState<ApiApplication[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchDashboardData = async () => {
      setIsLoading(true);
      setError(null);
      try {
        // Fetch stats and recent applications concurrently for better performance
        const [statsResponse, appsResponse] = await Promise.all([
          apiService.get('/v1/choices/dashboard-stats/'),
          apiService.get('/v1/applications/my/?ordering=-created_at&page_size=4') // Get 4 most recent
        ]);
        setStats(statsResponse.data);
        setRecentApplications(appsResponse.data.results || appsResponse.data);
      } catch (err) {
        console.error("Failed to load dashboard data:", err);
        setError("Could not load dashboard. Please refresh the page.");
        toast.error("Failed to load dashboard data.");
      } finally {
        setIsLoading(false);
      }
    };

    fetchDashboardData();
  }, []);

  return (
    <div className="flex-1 section-padding bg-muted/30">
      <div className="container-modern space-y-6">
        <div className="text-left">
          <h1 className="text-xl md:text-2xl font-bold text-foreground">Welcome back, {user?.full_name || 'Student'}!</h1>
          <p className="text-muted-foreground text-sm md:text-base">Manage your applications and track your academic journey from here.</p>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            <Card 
              className="card-modern overflow-hidden cursor-pointer hover:shadow-xl transition-all duration-300 group border border-gray-200 bg-blue-50 hover:bg-blue-100" 
              onClick={() => onNavigate('my-applications')}
            >
              <CardContent className="p-4 md:p-5">
                <div className="flex items-center justify-between">
                  <div className="space-y-2">
                    <p className="text-xs font-semibold text-blue-800 group-hover:text-blue-900 transition-colors uppercase tracking-wide">In Progress</p>
                    <p className="text-3xl md:text-4xl font-bold text-blue-900 group-hover:scale-105 transition-transform duration-300" style={{ fontFamily: 'Inter, system-ui, sans-serif', fontWeight: '800', letterSpacing: '-0.025em' }}>{isLoading ? '...' : stats?.my_applications?.pending ?? 0}</p>
                    <div className="flex items-center space-x-1 text-xs text-emerald-700 font-medium">

                    </div>
                  </div>
                  <div className="relative">
                    <div className="w-12 h-12 md:w-14 md:h-14 bg-gradient-to-br from-blue-600 to-blue-700 rounded-xl md:rounded-2xl flex items-center justify-center group-hover:scale-110 group-hover:rotate-3 transition-all duration-300 shadow-lg">
                      <FileCheck className="w-6 h-6 md:w-7 md:h-7 text-white drop-shadow-sm" />
                    </div>
                    <div className="absolute -top-1 -right-1 w-5 h-5 md:w-6 md:h-6 bg-gradient-to-br from-emerald-500 to-emerald-600 rounded-full flex items-center justify-center shadow-md">
                      <span className="text-xs font-bold text-white">2</span>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card 
              className="card-modern overflow-hidden cursor-pointer hover:shadow-xl transition-all duration-300 group border border-gray-200 bg-amber-50 hover:bg-amber-100" 
              onClick={() => onNavigate('my-applications')}
            >
              <CardContent className="p-4 md:p-5">
                <div className="flex items-center justify-between">
                  <div className="space-y-2">
                    <p className="text-xs font-semibold text-amber-800 group-hover:text-amber-900 transition-colors uppercase tracking-wide">Action Required</p>
                    <p className="text-3xl md:text-4xl font-bold text-amber-900 group-hover:scale-105 transition-transform duration-300" style={{ fontFamily: 'Inter, system-ui, sans-serif', fontWeight: '800', letterSpacing: '-0.025em' }}>{isLoading ? '...' : 0}</p>
                    <div className="flex items-center space-x-1 text-xs text-amber-700 font-medium">

                    </div>
                  </div>
                  <div className="relative">
                    <div className="w-12 h-12 md:w-14 md:h-14 bg-gradient-to-br from-amber-600 to-orange-600 rounded-xl md:rounded-2xl flex items-center justify-center group-hover:scale-110 group-hover:rotate-3 transition-all duration-300 shadow-lg">
                      <AlertCircle className="w-6 h-6 md:w-7 md:h-7 text-white drop-shadow-sm" />
                    </div>
                    <div className="absolute -top-1 -right-1 w-5 h-5 md:w-6 md:h-6 bg-gradient-to-br from-red-500 to-red-600 rounded-full flex items-center justify-center animate-pulse shadow-md">
                      <span className="text-xs font-bold text-white">!</span>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card 
              className="card-modern overflow-hidden cursor-pointer hover:shadow-xl transition-all duration-300 group border border-gray-200 bg-purple-50 hover:bg-purple-100" 
              onClick={() => onNavigate('support-center')}
            >
              <CardContent className="p-4 md:p-5">
                <div className="flex items-center justify-between">
                  <div className="space-y-2">
                    <p className="text-xs font-semibold text-purple-800 group-hover:text-purple-900 transition-colors uppercase tracking-wide">New Messages</p>
                    <p className="text-3xl md:text-4xl font-bold text-purple-900 group-hover:scale-105 transition-transform duration-300" style={{ fontFamily: 'Inter, system-ui, sans-serif', fontWeight: '800', letterSpacing: '-0.025em' }}>{isLoading ? '...' : stats?.my_tickets?.open ?? 0}</p>
                    <div className="flex items-center space-x-1 text-xs text-purple-700 font-medium">


                    </div>
                  </div>
                  <div className="relative">
                    <div className="w-12 h-12 md:w-14 md:h-14 bg-gradient-to-br from-purple-600 to-indigo-700 rounded-xl md:rounded-2xl flex items-center justify-center group-hover:scale-110 group-hover:rotate-3 transition-all duration-300 shadow-lg">
                      <MessageSquare className="w-6 h-6 md:w-7 md:h-7 text-white drop-shadow-sm" />
                    </div>
                    <div className="absolute -top-1 -right-1 w-5 h-5 md:w-6 md:h-6 bg-gradient-to-br from-pink-500 to-pink-600 rounded-full flex items-center justify-center shadow-md">
                      <span className="text-xs font-bold text-white">3</span>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
        </div>






        {/* Recent Applications Table */}
        <Card className="card-modern">
          <CardHeader className="border-b">
            <div className="flex items-center justify-between">
              <div>
                <CardTitle className="text-xl">Recent Applications</CardTitle>
                <p className="text-sm text-muted-foreground mt-1">Track your latest application submissions</p>
              </div>
              <Button variant="outline" size="sm" onClick={() => onNavigate('my-applications')}>View All</Button>
            </div>
          </CardHeader>
          <CardContent className="p-0">
            <div className="overflow-x-auto">
                <Table>
                <TableHeader><TableRow><TableHead>Application Type</TableHead><TableHead>Submission Date</TableHead><TableHead>Status</TableHead><TableHead className="text-right">Actions</TableHead></TableRow></TableHeader>
                <TableBody>
                    {isLoading ? (
                        <TableRow><TableCell colSpan={4} className="text-center py-10"><RefreshCw className="w-6 h-6 animate-spin mx-auto" /></TableCell></TableRow>
                    ) : error ? (
                        <TableRow><TableCell colSpan={4} className="text-center py-10 text-destructive">{error}</TableCell></TableRow>
                    ) : recentApplications.length === 0 ? (
                        <TableRow><TableCell colSpan={4} className="text-center py-10 text-muted-foreground">You haven't submitted any applications yet.</TableCell></TableRow>
                    ) : (
                        recentApplications.map((app) => (
                        <TableRow key={app.tracking_code}>
                            <TableCell className="font-medium">{app.application_type}</TableCell>
                            <TableCell>{formatDate(app.created_at)}</TableCell>
                            <TableCell>{getStatusBadge(statusMap[app.status])}</TableCell>
                            <TableCell className="text-right">
                            <Button variant="outline" size="sm" onClick={() => onViewApplication(app.tracking_code)}>
                                <Eye className="w-4 h-4 mr-2" />
                                View Details
                            </Button>
                            </TableCell>
                        </TableRow>
                        ))
                    )}
                </TableBody>
                </Table>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}
// end of frontend/src/components/Dashboard.tsx
// end of components/Dashboard.tsx