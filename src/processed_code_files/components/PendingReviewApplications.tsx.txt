// start of components/PendingReviewApplications.tsx
import React, { useState, useMemo } from 'react';
import { Button } from './ui/button';
import { Input } from './ui/input';
import { Label } from './ui/label';
import { Badge } from './ui/badge';
import { Card, CardContent, CardHeader, CardTitle } from './ui/card';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from './ui/select';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from './ui/table';
import { Avatar, AvatarFallback } from './ui/avatar';
import {
  Search,
  Eye,
  Filter,
  ArrowUpDown,
  AlertCircle,
  Clock,
  ClipboardList,
  Download,
  X
} from 'lucide-react';

interface PendingReviewApplicationsProps {
  onNavigate: (page: string) => void;
  onViewCase: (caseId: string) => void;
}

const mockPendingApplications = [
  { id: 'PRA-2024-001', applicantName: 'علیرضا احمدی', nationality: 'ایرانی', requestedField: 'مهندسی کامپیوتر', status: 'در انتظار بررسی اولیه', submitDate: '2024-02-20', priority: 'عادی', university: 'دانشگاه تهران' },
  { id: 'PRA-2024-002', applicantName: 'مریم کریمی', nationality: 'افغانستانی', requestedField: 'پزشکی', status: 'در انتظار تکمیل مدارک', submitDate: '2024-02-19', priority: 'فوری', university: 'دانشگاه علوم پزشکی' },
  { id: 'PRA-2024-003', applicantName: 'احمد رحیمی', nationality: 'عراقی', requestedField: 'مهندسی برق', status: 'در انتظار بررسی نهایی', submitDate: '2024-02-18', priority: 'عادی', university: 'دانشگاه صنعتی شریف' },
  { id: 'PRA-2024-004', applicantName: 'فاطمه نوری', nationality: 'سوری', requestedField: 'روانشناسی', status: 'در انتظار بررسی اولیه', submitDate: '2024-02-17', priority: 'عادی', university: 'دانشگاه تهران' },
  { id: 'PRA-2024-005', applicantName: 'محمد حسینی', nationality: 'پاکستانی', requestedField: 'فیزیک', status: 'در انتظار بررسی کمیته', submitDate: '2024-02-16', priority: 'فوری', university: 'دانشگاه فردوسی' },
];

const getStatusBadge = (status: string) => {
  switch (status) {
    case 'در انتظار بررسی اولیه': return <Badge className="status-badge-review">بررسی اولیه</Badge>;
    case 'در انتظار تکمیل مدارک': return <Badge className="status-badge-rejected">تکمیل مدارک</Badge>;
    case 'در انتظار بررسی نهایی': return <Badge className="status-badge-pending">بررسی نهایی</Badge>;
    case 'در انتظار بررسی کمیته': return <Badge className="status-badge-pending">بررسی کمیته</Badge>;
    default: return <Badge variant="secondary">{status}</Badge>;
  }
};

const ITEMS_PER_PAGE = 5;

export function PendingReviewApplications({ onNavigate, onViewCase }: PendingReviewApplicationsProps) {
  const [filters, setFilters] = useState({ status: 'all', searchTerm: '' });
  const [sortConfig, setSortConfig] = useState({ key: '', direction: '' });
  const [currentPage, setCurrentPage] = useState(1);

  const handleFilterChange = (field: string, value: string) => { setFilters(prev => ({ ...prev, [field]: value })); setCurrentPage(1); };
  const handleSort = (key: string) => { let direction = 'ascending'; if (sortConfig.key === key && sortConfig.direction === 'ascending') { direction = 'descending'; } setSortConfig({ key, direction }); };

  const filteredApplications = useMemo(() => mockPendingApplications.filter(app => (filters.status === 'all' || app.status === filters.status) && (app.applicantName.includes(filters.searchTerm) || app.nationality.includes(filters.searchTerm) || app.requestedField.includes(filters.searchTerm) || app.id.toLowerCase().includes(filters.searchTerm.toLowerCase()))), [filters]);
  const sortedApplications = useMemo(() => {
      if (!sortConfig.key) return filteredApplications;
      return [...filteredApplications].sort((a, b) => {
          const aValue = a[sortConfig.key as keyof typeof a];
          const bValue = b[sortConfig.key as keyof typeof b];
          if (sortConfig.direction === 'ascending') return aValue < bValue ? -1 : aValue > bValue ? 1 : 0;
          return aValue > bValue ? -1 : aValue < bValue ? 1 : 0;
      });
  }, [filteredApplications, sortConfig]);

  const currentApplications = sortedApplications.slice((currentPage - 1) * ITEMS_PER_PAGE, currentPage * ITEMS_PER_PAGE);
  const totalPages = Math.ceil(filteredApplications.length / ITEMS_PER_PAGE);
  const hasActiveFilters = filters.status !== 'all' || filters.searchTerm;
  const totalPending = filteredApplications.length;
  const urgentCount = filteredApplications.filter(app => app.priority === 'فوری').length;

  return (
    <div className="flex-1 section-padding bg-muted/30">
        <div className="container-modern space-y-8">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <Card className="card-modern overflow-hidden">
                    <CardContent className="p-6">
                        <div className="flex items-center justify-between">
                            <div className="space-y-2">
                                <p className="text-sm font-medium text-muted-foreground">درخواست‌های در انتظار</p>
                                <p className="text-3xl font-bold text-foreground">{totalPending}</p>
                            </div>
                            <div className="w-16 h-16 bg-warning-50 rounded-2xl flex items-center justify-center"><ClipboardList className="w-8 h-8 text-warning" /></div>
                        </div>
                    </CardContent>
                </Card>
                <Card className="card-modern overflow-hidden border-destructive/20">
                    <CardContent className="p-6">
                        <div className="flex items-center justify-between">
                            <div className="space-y-2">
                                <p className="text-sm font-medium text-muted-foreground">اولویت فوری</p>
                                <p className="text-3xl font-bold text-destructive">{urgentCount}</p>
                            </div>
                            <div className="w-16 h-16 bg-destructive-50 rounded-2xl flex items-center justify-center"><AlertCircle className="w-8 h-8 text-destructive" /></div>
                        </div>
                    </CardContent>
                </Card>
            </div>

            <Card className="card-modern">
                <CardHeader className="border-b border-border">
                    <CardTitle className="flex items-center space-x-2 space-x-reverse"><Filter className="w-5 h-5 text-primary" /><span>فیلترها و جستجو</span></CardTitle>
                </CardHeader>
                <CardContent className="p-6">
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div className="space-y-2">
                            <Label htmlFor="status-filter">وضعیت درخواست</Label>
                            <Select value={filters.status} onValueChange={(value) => handleFilterChange('status', value)}>
                                <SelectTrigger className="input-modern"><SelectValue placeholder="انتخاب وضعیت" /></SelectTrigger>
                                <SelectContent><SelectItem value="all">همه وضعیت‌ها</SelectItem><SelectItem value="در انتظار بررسی اولیه">در انتظار بررسی اولیه</SelectItem><SelectItem value="در انتظار تکمیل مدارک">در انتظار تکمیل مدارک</SelectItem><SelectItem value="در انتظار بررسی نهایی">در انتظار بررسی نهایی</SelectItem><SelectItem value="در انتظار بررسی کمیته">در انتظار بررسی کمیته</SelectItem></SelectContent>
                            </Select>
                        </div>
                        <div className="space-y-2">
                            <Label htmlFor="search">جستجو</Label>
                            <div className="relative"><Search className="absolute right-3 top-1/2 -translate-y-1/2 w-4 h-4 text-muted-foreground" /><Input id="search" placeholder="جستجو در درخواست‌ها..." value={filters.searchTerm} onChange={(e) => handleFilterChange('searchTerm', e.target.value)} className="input-modern pr-10" /></div>
                        </div>
                    </div>
                </CardContent>
            </Card>

            <Card className="card-modern">
                <CardHeader className="border-b border-border">
                    <CardTitle>فهرست درخواست‌های در انتظار بررسی</CardTitle>
                </CardHeader>
                <CardContent className="p-0">
                    <div className="overflow-x-auto"><Table><TableHeader><TableRow><TableHead>نام متقاضی</TableHead><TableHead>کشور</TableHead><TableHead>رشته درخواستی</TableHead><TableHead>وضعیت</TableHead><TableHead className="text-right">مشاهده</TableHead></TableRow></TableHeader><TableBody>
                        {currentApplications.map((app) => (
                            <TableRow key={app.id}>
                                <TableCell className="font-medium"><div className="flex items-center space-x-3 space-x-reverse"><Avatar className="w-8 h-8"><AvatarFallback>{app.applicantName.split(' ').map(n=>n[0]).join('')}</AvatarFallback></Avatar><span>{app.applicantName}</span></div></TableCell>
                                <TableCell>{app.nationality}</TableCell>
                                <TableCell>{app.requestedField}</TableCell>
                                <TableCell>{getStatusBadge(app.status)}</TableCell>
                                <TableCell className="text-right"><Button size="sm" variant="outline" onClick={() => onViewCase(app.id)}><Eye className="w-4 h-4 ml-2" />مشاهده</Button></TableCell>
                            </TableRow>
                        ))}
                    </TableBody></Table></div>
                </CardContent>
            </Card>
        </div>
    </div>
  );
}
// end of components/PendingReviewApplications.tsx