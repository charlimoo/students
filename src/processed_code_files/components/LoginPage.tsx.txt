// start of components/LoginPage.tsx
import React, { useState } from 'react';
import { Button } from './ui/button';
import { Input } from './ui/input';
import { Label } from './ui/label';
import { Card, CardContent, CardHeader } from './ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from './ui/tabs';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from './ui/select';
import { 
  GraduationCap, 
  Building2, 
  Globe,
  Shield,
  UserCheck,
  Mail,
  Lock,
  RefreshCw,
  Info
} from 'lucide-react';
import { useAuth } from '../context/AuthContext';
import { toast } from 'sonner';
import apiService from '../api/apiService';

interface LoginPageProps {
  onNavigate: (page: string) => void;
  onSignUp: () => void;
  onInstitutionSignUp: () => void;
  onStaffSignUp: () => void;
}

type Language = 'en' | 'fa';
type UserRole = 'student' | 'institution' | 'staff';

const translations = {
  en: {
    // Language switcher
    language: 'Language',
    english: 'English',
    persian: 'فارسی',
    
    // Page title and subtitle
    pageTitle: 'Comprehensive Student Portal',
    pageSubtitle: 'Manage your applications seamlessly',
    
    // Tab labels
    student: 'Student',
    institution: 'Institution',
    staff: 'Staff',
    
    // Form labels
    email: 'Email',
    password: 'Password',
    login: 'Login',
    
    // Placeholders
    emailPlaceholder: 'Enter your email address',
    passwordPlaceholder: 'Enter your password',
    
    // Footer links
    forgotPassword: 'Forgot your password?',
    noAccount: "Don't have an account? Sign up",
    
    // Tab descriptions (kept for accessibility but not shown)
    studentDesc: 'Student portal access',
    institutionDesc: 'Institution portal access',
    staffDesc: 'Staff portal access'
  },
  fa: {
    // Language switcher
    language: 'زبان',
    english: 'English',
    persian: 'فارسی',
    
    // Page title and subtitle
    pageTitle: 'ورود به پورتال جامع',
    pageSubtitle: 'مدیریت یکپارچه درخواست‌های دانشجویی',
    
    // Tab labels
    student: 'دانشجو',
    institution: 'موسسه',
    staff: 'کارشناس',
    
    // Form labels
    email: 'ایمیل',
    password: 'رمز عبور',
    login: 'ورود',
    
    // Placeholders
    emailPlaceholder: 'ایمیل',
    passwordPlaceholder: 'رمز عبور',
    
    // Footer links
    forgotPassword: 'رمز عبور را فراموش کرده‌اید؟',
    noAccount: 'حساب کاربری ندارید؟ ثبت‌نام کنید',
    
    // Tab descriptions (kept for accessibility but not shown)
    studentDesc: 'دسترسی پورتال دانشجویی',
    institutionDesc: 'دسترسی پورتال موسسه',
    staffDesc: 'دسترسی پورتال کارشناس'
  }
};
export function LoginPage({ onNavigate, onSignUp, onInstitutionSignUp, onStaffSignUp }: LoginPageProps) {
  const auth = useAuth();
  const [language, setLanguage] = useState<Language>('fa');
  const [activeTab, setActiveTab] = useState<UserRole>('staff');
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [isLoggingIn, setIsLoggingIn] = useState(false);

  const t = translations[language] || translations['fa'];
  const isRTL = language === 'fa';

  const handleLogin = async () => {
    if (!email || !password) {
      toast.error('خطا', { description: 'لطفا ایمیل و رمز عبور را وارد کنید.' });
      return;
    }

    setIsLoggingIn(true);
    try {
      await auth.login(email, password);
      
      // Fetch the user details again to ensure we have the latest role info
      const userResponse = await apiService.get('/v1/me/');
      const user = userResponse.data;
      
      toast.success('ورود با موفقیت انجام شد!');
      
      // Role-based navigation logic
      const roles = user.roles.map((r: { name: string }) => r.name);
      
      if (roles.includes('HeadOfOrganization')) {
        onNavigate('admin-users');
      } else if (roles.includes('UniversityExpert')) {
        onNavigate('staff-workbench');
      } else if (roles.includes('Recruitment Institution')) {
        onNavigate('institution-dashboard');
      } else { // Default to Applicant
        onNavigate('dashboard');
      }

    } catch (error: any) {
      const errorMsg = error.response?.data?.detail || 'ایمیل یا رمز عبور اشتباه است.';
      toast.error('ورود ناموفق', {
        description: errorMsg,
      });
    } finally {
      setIsLoggingIn(false);
    }
  };

  const getTabIcon = (role: UserRole) => {
    switch (role) {
      case 'student': return <GraduationCap className="w-4 h-4" />;
      case 'institution': return <Building2 className="w-4 h-4" />;
      case 'staff': return <Shield className="w-4 h-4" />;
      default: return <Info className="w-4 h-4" />;
    }
  };

  return (
    <div className={`min-h-screen bg-gradient-to-br from-primary-50 to-secondary-500/10 ${isRTL ? 'font-family-persian' : ''}`} dir={isRTL ? 'rtl' : 'ltr'}>
      <div className="absolute top-6 right-6 z-10">
        <Select value={language} onValueChange={(value: Language) => setLanguage(value)}>
          <SelectTrigger className={`w-32 bg-white/90 backdrop-blur-sm border-white/20 shadow-sm ${isRTL ? 'persian-text' : ''}`}>
            <div className="flex items-center space-x-2 space-x-reverse">
              <Globe className="w-4 h-4 text-muted-foreground" />
              <SelectValue />
            </div>
          </SelectTrigger>
          <SelectContent align={isRTL ? 'start' : 'end'} dir={isRTL ? 'rtl' : 'ltr'}>
            <SelectItem value="en">English</SelectItem>
            <SelectItem value="fa" className="persian-text">فارسی</SelectItem>
          </SelectContent>
        </Select>
      </div>
      <div className="flex items-center justify-center min-h-screen p-6">
        <div className="w-full max-w-md">
          <div className="text-center mb-8">
            <div className="w-16 h-16 bg-primary rounded-2xl flex items-center justify-center mx-auto mb-6 shadow-lg"><GraduationCap className="w-8 h-8 text-primary-foreground" /></div>
            <h1 className="text-3xl font-bold text-foreground mb-3 persian-heading">{t.pageTitle}</h1>
            <p className="text-muted-foreground text-center max-w-sm mx-auto persian-body">{t.pageSubtitle}</p>
          </div>
          <Card className="card-modern shadow-xl border-white/50 backdrop-blur-sm">
            <CardHeader className="pb-6">
              <Tabs value={activeTab} onValueChange={(value) => setActiveTab(value as UserRole)} className="w-full">
                <TabsList className="grid w-full grid-cols-3 h-12 bg-muted/50 rounded-xl p-1">
                  <TabsTrigger value="student" className="flex items-center space-x-2 space-x-reverse text-xs font-medium data-[state=active]:bg-white data-[state=active]:shadow-sm persian-text">{getTabIcon('student')}<span>{t.student}</span></TabsTrigger>
                  <TabsTrigger value="institution" className="flex items-center space-x-2 space-x-reverse text-xs font-medium data-[state=active]:bg-white data-[state=active]:shadow-sm persian-text">{getTabIcon('institution')}<span>{t.institution}</span></TabsTrigger>
                  <TabsTrigger value="staff" className="flex items-center space-x-2 space-x-reverse text-xs font-medium data-[state=active]:bg-white data-[state=active]:shadow-sm persian-text">{getTabIcon('staff')}<span>{t.staff}</span></TabsTrigger>
                </TabsList>
              </Tabs>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="space-y-4">
                <div className="space-y-2">
                  <Label htmlFor="email" className="flex items-center space-x-2 space-x-reverse persian-caption"><Mail className="w-4 h-4 text-muted-foreground" /><span>{t.email}</span></Label>
                  <Input id="email" type="email" value={email} onChange={(e) => setEmail(e.target.value)} placeholder={t.emailPlaceholder} className="input-modern persian-body text-right" dir="ltr" />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="password" className="flex items-center space-x-2 space-x-reverse persian-caption"><Lock className="w-4 h-4 text-muted-foreground" /><span>{t.password}</span></Label>
                  <Input id="password" type="password" value={password} onChange={(e) => setPassword(e.target.value)} placeholder={t.passwordPlaceholder} className="input-modern persian-body text-right" dir="ltr" />
                </div>
                <Button onClick={handleLogin} disabled={isLoggingIn} className="w-full button-primary h-12 text-base persian-text" size="lg">
                  {isLoggingIn ? <RefreshCw className="w-5 h-5 animate-spin" /> : <UserCheck className="w-5 h-5 ml-2" />}
                  {isLoggingIn ? 'در حال ورود...' : t.login}
                </Button>
                <div className="space-y-3 pt-2">
                  <div className="text-center"><button className="text-sm text-primary hover:text-primary-600 transition-colors persian-body">{t.forgotPassword}</button></div>
                  <div className="text-center"><button onClick={() => { activeTab === 'institution' ? onInstitutionSignUp() : onSignUp() }} className="text-sm text-muted-foreground hover:text-foreground transition-colors persian-body">{t.noAccount}</button></div>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
}
// end of components/LoginPage.tsx