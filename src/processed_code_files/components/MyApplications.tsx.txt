// start of components/MyApplications.tsx
import React, { useState, useMemo, useEffect } from 'react';
import { Button } from './ui/button';
import { Input } from './ui/input';
import { Label } from './ui/label';
import { Badge } from './ui/badge';
import { Card, CardContent, CardHeader, CardTitle } from './ui/card';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from './ui/select';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from './ui/table';
import { Search, Filter, Eye, X, CheckCircle2, Clock, AlertTriangle, XCircle, RefreshCw } from 'lucide-react';
import apiService from '../api/apiService';
import { toast } from 'sonner';

interface MyApplicationsProps {
  onBack: () => void;
  onViewApplication: (id: string) => void;
  initialFilter?: string;
}

interface ApiApplication {
  tracking_code: string;
  application_type: string;
  created_at: string;
  updated_at: string;
  status: 'PENDING_REVIEW' | 'PENDING_CORRECTION' | 'APPROVED' | 'REJECTED';
  full_name: string;
}

const statusMap: { [key: string]: string } = {
  APPROVED: 'approved',
  REJECTED: 'rejected',
  PENDING_REVIEW: 'under-review',
  PENDING_CORRECTION: 'requires-action',
};

const getStatusBadge = (statusKey: string) => {
  switch (statusKey) {
    case 'approved': return <Badge className="bg-success/10 text-success border-success/20"><CheckCircle2 className="w-3 h-3 mr-1" />Approved</Badge>;
    case 'under-review': return <Badge className="bg-primary/10 text-primary border-primary/20"><Clock className="w-3 h-3 mr-1" />Under Review</Badge>;
    case 'requires-action': return <Badge className="bg-warning/10 text-warning border-warning/20"><AlertTriangle className="w-3 h-3 mr-1" />Requires Action</Badge>;
    case 'rejected': return <Badge className="bg-destructive/10 text-destructive border-destructive/20"><XCircle className="w-3 h-3 mr-1" />Rejected</Badge>;
    default: return <Badge variant="secondary">{statusKey}</Badge>;
  }
};

const formatDate = (dateString: string) => new Date(dateString).toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: 'numeric' });

export function MyApplications({ onBack, onViewApplication, initialFilter }: MyApplicationsProps) {
  const getInitialStatusFilter = (filter?: string) => {
    if (filter === 'in-progress') return 'under-review';
    if (filter === 'requires-action') return 'requires-action';
    return 'all';
  };

  const [applications, setApplications] = useState<ApiApplication[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [filters, setFilters] = useState({ status: getInitialStatusFilter(initialFilter), startDate: '', endDate: '', searchTerm: '' });

  useEffect(() => {
    const fetchMyApplications = async () => {
      setIsLoading(true);
      setError(null);
      try {
        const response = await apiService.get('/v1/applications/my/');
        setApplications(response.data.results || response.data);
      } catch (err) {
        setError("Could not load your applications. Please try again later.");
        toast.error("Failed to load applications.");
      } finally {
        setIsLoading(false);
      }
    };
    fetchMyApplications();
  }, []);

  const filteredApplications = useMemo(() => {
    return applications.filter(app => {
      const frontendStatus = statusMap[app.status] || 'unknown';
      if (filters.status !== 'all' && frontendStatus !== filters.status) return false;
      if (filters.startDate && new Date(app.created_at) < new Date(filters.startDate)) return false;
      if (filters.endDate && new Date(app.created_at) > new Date(filters.endDate)) return false;
      if (filters.searchTerm && !app.application_type.toLowerCase().includes(filters.searchTerm.toLowerCase()) && !app.tracking_code.toLowerCase().includes(filters.searchTerm.toLowerCase())) return false;
      return true;
    });
  }, [filters, applications]);

  const hasActiveFilters = filters.status !== 'all' || filters.startDate || filters.endDate || filters.searchTerm;
  const clearFilters = () => setFilters({ status: 'all', startDate: '', endDate: '', searchTerm: '' });

  return (
    <div className="container-modern py-8 space-y-8">
      <Card className="card-modern">
        <CardHeader><CardTitle className="flex items-center space-x-2"><Filter className="w-5 h-5 text-primary" /><span>Filter Applications</span></CardTitle></CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 lg:grid-cols-4 gap-4">
            <div className="space-y-2"><Label>Status</Label><Select value={filters.status} onValueChange={v => setFilters(p => ({...p, status: v}))}><SelectTrigger><SelectValue /></SelectTrigger><SelectContent><SelectItem value="all">All Statuses</SelectItem><SelectItem value="approved">Approved</SelectItem><SelectItem value="under-review">Under Review</SelectItem><SelectItem value="requires-action">Requires Action</SelectItem><SelectItem value="rejected">Rejected</SelectItem></SelectContent></Select></div>
            <div className="space-y-2"><Label>Start Date</Label><Input type="date" value={filters.startDate} onChange={e => setFilters(p => ({...p, startDate: e.target.value}))} /></div>
            <div className="space-y-2"><Label>End Date</Label><Input type="date" value={filters.endDate} onChange={e => setFilters(p => ({...p, endDate: e.target.value}))} /></div>
            <div className="space-y-2"><Label>Search</Label><Input placeholder="Search by type or ID..." value={filters.searchTerm} onChange={e => setFilters(p => ({...p, searchTerm: e.target.value}))} /></div>
          </div>
          {hasActiveFilters && <Button variant="ghost" size="sm" onClick={clearFilters} className="mt-4"><X className="w-3 h-3 mr-1" />Clear Filters</Button>}
        </CardContent>
      </Card>

      <Card className="card-modern">
        <CardHeader><CardTitle>My Applications ({filteredApplications.length})</CardTitle></CardHeader>
        <CardContent className="p-0">
          <div className="overflow-x-auto">
            <Table>
              <TableHeader><TableRow><TableHead>Type</TableHead><TableHead>Tracking ID</TableHead><TableHead>Submission</TableHead><TableHead>Last Update</TableHead><TableHead>Status</TableHead><TableHead className="text-right">Actions</TableHead></TableRow></TableHeader>
              <TableBody>
                {isLoading ? <TableRow><TableCell colSpan={6} className="text-center py-10"><RefreshCw className="w-6 h-6 animate-spin mx-auto" /></TableCell></TableRow>
                : error ? <TableRow><TableCell colSpan={6} className="text-center py-10 text-destructive">{error}</TableCell></TableRow>
                : filteredApplications.length === 0 ? <TableRow><TableCell colSpan={6} className="text-center py-10">No applications found.</TableCell></TableRow>
                : filteredApplications.map((app) => (
                  <TableRow key={app.tracking_code}>
                    <TableCell className="font-medium">{app.application_type}</TableCell>
                    <TableCell className="font-mono text-sm text-muted-foreground">{app.tracking_code}</TableCell>
                    <TableCell>{formatDate(app.created_at)}</TableCell>
                    <TableCell>{formatDate(app.updated_at)}</TableCell>
                    <TableCell>{getStatusBadge(statusMap[app.status])}</TableCell>
                    <TableCell className="text-right"><Button size="sm" onClick={() => onViewApplication(app.tracking_code)}><Eye className="w-4 h-4 mr-2" />View Details</Button></TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
// end of components/MyApplications.tsx